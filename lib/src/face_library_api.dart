// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

class FaceInfo {
  FaceInfo({
    this.faceId,
    this.faceFeature,
  });

  String? faceId;
  String? faceFeature;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['faceId'] = faceId;
    pigeonMap['faceFeature'] = faceFeature;
    return pigeonMap;
  }

  static FaceInfo decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return FaceInfo(
      faceId: pigeonMap['faceId'] as String?,
      faceFeature: pigeonMap['faceFeature'] as String?,
    );
  }
}

class FaceResult {
  FaceResult({
    this.isShowPreviewView,
    this.code,
    this.msg,
    this.detail,
    this.licenseNo,
    this.licenseNos,
    this.faceId,
    this.faceFeature,
    this.faceImgPath,
    this.useType,
    this.tag,
    this.which,
  });

  bool? isShowPreviewView;
  int? code;
  String? msg;
  String? detail;
  String? licenseNo;
  List<String?>? licenseNos;
  String? faceId;
  String? faceFeature;
  String? faceImgPath;
  int? useType;
  String? tag;
  int? which;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['isShowPreviewView'] = isShowPreviewView;
    pigeonMap['code'] = code;
    pigeonMap['msg'] = msg;
    pigeonMap['detail'] = detail;
    pigeonMap['licenseNo'] = licenseNo;
    pigeonMap['licenseNos'] = licenseNos;
    pigeonMap['faceId'] = faceId;
    pigeonMap['faceFeature'] = faceFeature;
    pigeonMap['faceImgPath'] = faceImgPath;
    pigeonMap['useType'] = useType;
    pigeonMap['tag'] = tag;
    pigeonMap['which'] = which;
    return pigeonMap;
  }

  static FaceResult decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return FaceResult(
      isShowPreviewView: pigeonMap['isShowPreviewView'] as bool?,
      code: pigeonMap['code'] as int?,
      msg: pigeonMap['msg'] as String?,
      detail: pigeonMap['detail'] as String?,
      licenseNo: pigeonMap['licenseNo'] as String?,
      licenseNos: (pigeonMap['licenseNos'] as List<Object?>?)?.cast<String?>(),
      faceId: pigeonMap['faceId'] as String?,
      faceFeature: pigeonMap['faceFeature'] as String?,
      faceImgPath: pigeonMap['faceImgPath'] as String?,
      useType: pigeonMap['useType'] as int?,
      tag: pigeonMap['tag'] as String?,
      which: pigeonMap['which'] as int?,
    );
  }
}

class _FaceRequestApiCodec extends StandardMessageCodec {
  const _FaceRequestApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FaceInfo) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is FaceResult) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return FaceInfo.decode(readValue(buffer)!);
      
      case 129:       
        return FaceResult.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class FaceRequestApi {
  /// Constructor for [FaceRequestApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  FaceRequestApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _FaceRequestApiCodec();

  Future<FaceResult> faceRegister(bool arg_isShowPreviewView, String arg_licenseNo) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FaceRequestApi.faceRegister', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_isShowPreviewView, arg_licenseNo]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as FaceResult?)!;
    }
  }

  Future<FaceResult> faceRecognition(bool arg_isShowPreviewView) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FaceRequestApi.faceRecognition', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_isShowPreviewView]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as FaceResult?)!;
    }
  }

  Future<FaceResult> cancelFaceRegisterAndRecognition() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FaceRequestApi.cancelFaceRegisterAndRecognition', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as FaceResult?)!;
    }
  }

  Future<FaceResult> addFaceData(FaceInfo arg_faceInfo) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FaceRequestApi.addFaceData', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_faceInfo]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as FaceResult?)!;
    }
  }

  Future<FaceResult> removeFaceData(FaceInfo arg_faceInfo) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FaceRequestApi.removeFaceData', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_faceInfo]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as FaceResult?)!;
    }
  }

  Future<FaceResult> syncFaceData(List<FaceInfo?> arg_faceInfos) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FaceRequestApi.syncFaceData', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_faceInfos]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as FaceResult?)!;
    }
  }

  Future<FaceResult> cleanFaceData() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.FaceRequestApi.cleanFaceData', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as FaceResult?)!;
    }
  }
}

class _FaceResultApiCodec extends StandardMessageCodec {
  const _FaceResultApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is FaceResult) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return FaceResult.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class FaceResultApi {
  static const MessageCodec<Object?> codec = _FaceResultApiCodec();

  void faceErrorCallback(FaceResult faceResult);
  void faceRegisterCallback(FaceResult faceResult);
  void faceRegisterTipsCallback(FaceResult faceResult);
  void faceRecognitionCallback(FaceResult faceResult);
  void faceRecognitionTipsCallback(FaceResult faceResult);
  void faceDetectedCallback(FaceResult faceResult);
  void noFaceDetectedCallback(FaceResult faceResult);
  void manualCancelFaceRegisterCallback();
  void manualCancelFaceRecognitionCallback();
  void buttonClickCallback(String buttonType);
  static void setup(FaceResultApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FaceResultApi.faceErrorCallback', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FaceResultApi.faceErrorCallback was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FaceResult? arg_faceResult = (args[0] as FaceResult?);
          assert(arg_faceResult != null, 'Argument for dev.flutter.pigeon.FaceResultApi.faceErrorCallback was null, expected non-null FaceResult.');
          api.faceErrorCallback(arg_faceResult!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FaceResultApi.faceRegisterCallback', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FaceResultApi.faceRegisterCallback was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FaceResult? arg_faceResult = (args[0] as FaceResult?);
          assert(arg_faceResult != null, 'Argument for dev.flutter.pigeon.FaceResultApi.faceRegisterCallback was null, expected non-null FaceResult.');
          api.faceRegisterCallback(arg_faceResult!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FaceResultApi.faceRegisterTipsCallback', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FaceResultApi.faceRegisterTipsCallback was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FaceResult? arg_faceResult = (args[0] as FaceResult?);
          assert(arg_faceResult != null, 'Argument for dev.flutter.pigeon.FaceResultApi.faceRegisterTipsCallback was null, expected non-null FaceResult.');
          api.faceRegisterTipsCallback(arg_faceResult!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FaceResultApi.faceRecognitionCallback', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FaceResultApi.faceRecognitionCallback was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FaceResult? arg_faceResult = (args[0] as FaceResult?);
          assert(arg_faceResult != null, 'Argument for dev.flutter.pigeon.FaceResultApi.faceRecognitionCallback was null, expected non-null FaceResult.');
          api.faceRecognitionCallback(arg_faceResult!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FaceResultApi.faceRecognitionTipsCallback', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FaceResultApi.faceRecognitionTipsCallback was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FaceResult? arg_faceResult = (args[0] as FaceResult?);
          assert(arg_faceResult != null, 'Argument for dev.flutter.pigeon.FaceResultApi.faceRecognitionTipsCallback was null, expected non-null FaceResult.');
          api.faceRecognitionTipsCallback(arg_faceResult!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FaceResultApi.faceDetectedCallback', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FaceResultApi.faceDetectedCallback was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FaceResult? arg_faceResult = (args[0] as FaceResult?);
          assert(arg_faceResult != null, 'Argument for dev.flutter.pigeon.FaceResultApi.faceDetectedCallback was null, expected non-null FaceResult.');
          api.faceDetectedCallback(arg_faceResult!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FaceResultApi.noFaceDetectedCallback', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FaceResultApi.noFaceDetectedCallback was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final FaceResult? arg_faceResult = (args[0] as FaceResult?);
          assert(arg_faceResult != null, 'Argument for dev.flutter.pigeon.FaceResultApi.noFaceDetectedCallback was null, expected non-null FaceResult.');
          api.noFaceDetectedCallback(arg_faceResult!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FaceResultApi.manualCancelFaceRegisterCallback', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.manualCancelFaceRegisterCallback();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FaceResultApi.manualCancelFaceRecognitionCallback', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.manualCancelFaceRecognitionCallback();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.FaceResultApi.buttonClickCallback', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.FaceResultApi.buttonClickCallback was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_buttonType = (args[0] as String?);
          assert(arg_buttonType != null, 'Argument for dev.flutter.pigeon.FaceResultApi.buttonClickCallback was null, expected non-null String.');
          api.buttonClickCallback(arg_buttonType!);
          return;
        });
      }
    }
  }
}
